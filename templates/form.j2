{% extends "bootstrap/form.j2" %}

{% block head %}
{{ super() }}
{% endblock %}

{% block style %}
{{ super() }}
{% endblock %}

{% block body %}
<div class="row justify-content-center" style="width:100%; font-family: 'Open Sans';">
    <div class="container col-8">
        <div class="mb-5 mt-2 mx-0 row align-items-center">
            <div class="col-3">
                <img src="{{ url_for('static', filename='x2ktr.png') }}" style="width:175px"
                    class="img-fluid float-right">
            </div>
            <div class="col-7 text-center">
                <h1 style="font-weight: bolder; color: rgb(0, 110, 26);"> SC2Targets </h1>
                <p class="my-0">Upload a single cell RNA-seq matrix or a bulk RNA-seq matrix with and select a
                    corresponding single cell reference to identify cell-surface targets and L1000 compounds.</p>
            </div>
            <div class="col-1 ml-5 text-center">
                Executed Reports: <p style="font-weight: 1200; font-size: 1.5rem" id="numruns"></p>
            </div>
        </div>
    </div>
</div>

<div class="text-center justify-content-center mx-auto">
    <div class="row">
        <div class="col-12">
            <div class="container col-10" style="font-size: 14px !important;">
                <form method="POST" enctype="multipart/form-data" action="">


                    <div class="row justify-content-evenly">
                        {{ _fields[1].render() }}
                    </div>
                    <div class="row">
                        {% for _field in _fields[2:] %}
                        <div class="col-4">
                            {{ _field.render() }}
                        </div>
                        {% endfor %}
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <input onclick="checkFiles(event)" type="submit" value="Submit" />
                            <div id="submit-feedback" class="p-2 px-5 rounded mx-auto"
                                style="position: absolute; background-color: rgba(255, 0, 0, 0.552);">
                                Please provide at least one data file
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}


{% block script %}
{{ super() }}

<script>

    const cancerMappings = {
        'BR': ['Breast Ductal Carcinoma In Situ', 'Invasive Breast Carcinoma'],
        'CCRCC': ['Renal Cell Carcinoma'],
        'CO': ['Colorectal Adenocarcinoma'],
        'GBM': ['Diffuse Glioma'],
        'HNSCC': ['Head and Neck Squamous Cell Carcinoma'],
        'LSCC': ['Non-Small Cell Lung Cancer'],
        'LUAD': ['Non-Small Cell Lung Cancer'],
        'OV': ['Ovarian Epithelial Tumor'],
        'PDAC': ['Pancreatic Adenocarcinoma'],
        'UCEC': ['Endometrial Carcinoma']
    }

    const cancerUMAP = {
        'BR': [4, 0.05, 0.3],
        'CCRCC': [3, 0.1, 0.7],
        'CO': [3, 0.0001, 1.3],
        'GBM': [3, 0.01, 0.8],
        'HNSCC': [4, 0.001, 0.3],
        'LSCC': [3, 0.0001, 0.5],
        'LUAD': [3, 0.0001, 0.9],
        'OV': [3, 0.001, 0.8],
        'PDAC': [3, 0.001, 0.9],
        'UCEC': [3, 0.001, 0.4]
    }

    const URLmap = {
        'BR': '42e130aef3b94bca5d4f094624e86b55fd2748b2',
        'CCRCC': '8e4927d7dbe0069133a252c489a3d2174b4be032',
        'CO': 'ebef01276d375cb2c20ac9d2cb1819e66f74092e',
        'GBM': 'f61afc06057289cae95b68192ce0e064f749cbf6',
        'HNSCC': 'd484a8c3821596b42eacddf4864fe3e214dd2a64',
        'LSCC': '737c796f1eb32d2d224bb8352204f6b139c4966a',
        'LUAD': 'cdf92528814c08ba6661c2fc8df1c7d03cf1c092',
        'OV': 'b196edbc7c53228d6ddb45a323c1190749576da3',
        'PDAC': 'be68ad486dba82b4b639bfbe95cbb78970894655',
        'UCEC': 'dd5337d7015ab18f0cde98a1ea2f334a425fb717'
    }

    function loadAllExamples(tumorType) {

        window.open('https://multiomics2targets.maayanlab.cloud/' + URLmap[tumorType])

    }

    function loadAllExamplesRun(tumorType) {

        const textbtn = document.getElementsByClassName('text-btn ' + tumorType);
        for (let i = 0; i < textbtn.length; i++) {
            textbtn[i].click();
        }
        const options = document.getElementsByClassName('option')
        for (let i = 0; i < options.length; i++) {
            if (cancerMappings[tumorType].includes(options[i].innerText)) {
                options[i].selected = true
            } else {
                options[i].selected = false
            }
        }

        const umapParams = cancerUMAP[tumorType]
        const umapFields = ['n_neighbors', 'min_dist', 'resolution']
        for (let i = 0; i < umapFields.length; i++) {
            document.forms[0].elements[umapFields[i]].value = umapParams[i]
        }

    }



    var trueTypeOf = (obj) => Object.prototype.toString.call(obj).slice(8, -1).toLowerCase()


    function checkFile(field) {
        const meta = document.forms[0].elements[field]
        var metavalue;
        if (trueTypeOf(meta) == 'radionodelist') {
            metavalue = meta[1].value
        } else {
            metavalue = meta.value
            const reg = new RegExp('^(drs|s3|gs|ftp|http|https)://.+$')
            if (!reg.test(metavalue)) {
                metavalue = undefined;
            }
        }
        return metavalue ? true : false
    }

    function resetParams() {
        const params = [15, 0.01, 1, '', 'yes', 'yes', 'yes', 'yes', 0.8, 0.5, 500, 500, 'Protein-Protein Co-expression', []]
        const fields = ['n_neighbors', 'min_dist', 'resolution', 'cluster_column',
            'membrane_screener', 'normalize_to_bg', 'impute_protein_expr',
            'impute_phospho_expr', 'percent_rows_protein', 'percent_rows_phospho', 'chea3_n', 'kea3_n',
            'intermediate_method', 'tumor_validate']
        for (let i = 0; i < fields.length; i++) {
            document.forms[0].elements[fields[i]].value = params[i]
        }

    }

    function checkFiles(e) {
        const files = [checkFile('rna_expr'), checkFile('prot_expr'), checkFile('phospho_expr'), checkFile('meta')]
        if (files[0] || files[1] || files[2]) {
            return;
        } else {
            e.preventDefault();
            document.getElementById('submit-feedback').style.visibility = 'visible';
            document.getElementById('submit-feedback').style.opacity = 1;
            setTimeout(() => {
                document.getElementById('submit-feedback').style.opacity = 0;
            }, 3000)
        }
    }

    function getNumRuns() {
        fetch('/blueprint/numruns').then(response => response.json()).then(data => {
            document.getElementById('numruns').innerText = data.num_runs;
        })
    }
    getNumRuns()
</script>
{% endblock %}